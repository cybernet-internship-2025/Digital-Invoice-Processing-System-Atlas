version: '3.8'

services:
  api-gateway:
    build: ./nginx
    container_name: api-gateway-container
    ports:
      - "80:80"
    restart: always
    depends_on:
      - invoice-service
      - notification-service
      - user-service

  postgres-db:
    image: postgres:16-alpine
    container_name: postgres-db-container
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_pass}
      POSTGRES_DB: ${POSTGRES_DB:-postgres}

      # invoice
      INVOICE_DB_NAME: ${INVOICE_DB_NAME:-invoice}
      INVOICE_DB_USER: ${INVOICE_DB_USER:-invoice}
      INVOICE_DB_PASS: ${INVOICE_DB_PASS:-invoice_pass}

      # notification
      NOTIFICATION_DB_NAME: ${NOTIFICATION_DB_NAME:-notification}
      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER:-notification}
      NOTIFICATION_DB_PASS: ${NOTIFICATION_DB_PASS:-notification_pass}

      # user
      USER_DB_NAME: ${USER_DB_NAME:-user}
      USER_DB_USER: ${USER_DB_USER:-user}
      USER_DB_PASS: ${USER_DB_PASS:-user_pass}

    volumes:
      - postgres-data:/var/lib/postgresql/data
      # db container initialization
      - ./postgres-init:/docker-entrypoint-initdb.d
    restart: always

  invoice-service:
#    build: ./invoice
    build:
      context: .
      dockerfile: invoice/Dockerfile
    container_name: invoice-service-container
    environment:
      POSTGRES_USER: ${INVOICE_DB_USER:-invoice}
      POSTGRES_PASSWORD: ${INVOICE_DB_PASS:-invoice_pass}
      POSTGRES_DB: ${INVOICE_DB_NAME:-invoice}
    depends_on:
      - postgres-db
    restart: always

  notification-service:
#    build: ./notification
    build:
      context: .
      dockerfile: notification/Dockerfile
    container_name: notification-service-container
    environment:
      POSTGRES_USER: ${NOTIFICATION_DB_USER:-notification}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASS:-notification_pass}
      POSTGRES_DB: ${NOTIFICATION_DB_NAME:-notification}
    depends_on:
      - postgres-db
    restart: always

  user-service:
#    build: ./user-management
    build:
      context: .
      dockerfile: user-management/Dockerfile
    container_name: user-service-container
    environment:
      POSTGRES_USER: ${USER_DB_USER:-user}
      POSTGRES_PASSWORD: ${USER_DB_PASS:-user_pass}
      POSTGRES_DB: ${USER_DB_NAME:-user}
    depends_on:
      - postgres-db
    restart: always


volumes:
  postgres-data: