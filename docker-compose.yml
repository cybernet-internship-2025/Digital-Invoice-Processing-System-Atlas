version: '3.8'

services:
  api-gateway:
    platform: linux/arm64
    build: ./nginx
    container_name: api-gateway-container
    ports:
      - "80:80"
    restart: always
    depends_on:
      - invoice-service
      - notification-service
      - user-service

  postgres-db:
    #    image: postgres:16-alpine
    platform: linux/arm64
    build:
      context: ./postgres-init
      dockerfile: Dockerfile
    container_name: postgres-db-container
    ports:
      - "5432:5432" # əgər daha əvvəl postgres quraşdırılıbsa, local üçün expose portu dəyişin e.g : "5433:5432"
      # və application.yml - da nəzərə alın
    environment:
      TZ: Asia/Baku

      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}

      # invoice
      INVOICE_DB_NAME: ${INVOICE_DB_NAME}
      INVOICE_DB_USER: ${INVOICE_DB_USER}
      INVOICE_DB_PASS: ${INVOICE_DB_PASS}

      # notification
      NOTIFICATION_DB_NAME: ${NOTIFICATION_DB_NAME}
      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER}
      NOTIFICATION_DB_PASS: ${NOTIFICATION_DB_PASS}

      # user
      USER_DB_NAME: ${USER_DB_NAME}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}

    volumes:
      - postgres-data:/var/lib/postgresql/data
      # db container initialization
    #      - ./postgres-init:/docker-entrypoint-initdb.d
    restart: always

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-broker:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka-broker
    ports:
      # Exposes Kafka to your local machine for debugging/management tools
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      # This is the address other containers will use to connect to Kafka
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka-broker:29092
      # Required for single-node Kafka setup
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  invoice-service:
    #    build: ./invoice
    platform: linux/arm64
    build:
      context: .
      dockerfile: invoice/Dockerfile
    container_name: invoice-service-container
    environment:
      TZ: Asia/Baku

      INVOICE_DB_USER: ${INVOICE_DB_USER}
      INVOICE_DB_PASS: ${INVOICE_DB_PASS}
      INVOICE_DB_NAME: ${INVOICE_DB_NAME}
    depends_on:
      - postgres-db
    restart: always

  notification-service:
    #    build: ./notification
    platform: linux/arm64
    build:
      context: .
      dockerfile: notification/Dockerfile
    container_name: notification-service-container
    environment:
      TZ: Asia/Baku

      NOTIFICATION_DB_USER: ${NOTIFICATION_DB_USER}
      NOTIFICATION_DB_PASS: ${NOTIFICATION_DB_PASS}
      NOTIFICATION_DB_NAME: ${NOTIFICATION_DB_NAME}
    depends_on:
      - postgres-db
      - kafka-broker
    restart: always

  integration-service:
    #    build: ./integration
    platform: linux/arm64
    build:
      context: .
      dockerfile: integration/Dockerfile
    container_name: integration-service-container
    environment:
      TZ: Asia/Baku
    restart: always

  user-service:
    #    build: ./user-management
    platform: linux/arm64
    build:
      context: .
      dockerfile: user-management/Dockerfile
    container_name: user-service-container
    environment:
      TZ: Asia/Baku

      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: ${USER_DB_PASS}
      USER_DB_NAME: ${USER_DB_NAME}
    depends_on:
      - postgres-db
      - kafka-broker
    restart: always

  redis:
    platform: linux/arm64
    image: redis:8.2.0-alpine
    container_name: redis-container
    ports:
      - "6379:6379"
    depends_on:
      - integration-service
    restart: always
    volumes:
      - redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

volumes:
  postgres-data:
  redis-data: